version: "3.9"

services:
  db:
    image: simonschool/woody_database:latest
    environment:
      - MYSQL_DATABASE=woody
      - MYSQL_ROOT_PASSWORD=pass
    volumes:
      - db-data:/var/lib/mysql
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    # ports:
    #   - "15672:15672"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  misc-service:
    image: simonschool/woody_misc:latest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      - REDIS_HOST=redis
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker
    depends_on:
      - redis
      - db

  product-service:
    image: simonschool/woody_product:latest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      - REDIS_HOST=redis
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker
    depends_on:
      - redis
      - db

  order-service:
    image: simonschool/woody_order:latest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker
    depends_on:
      - rabbitmq
      - db

  order-worker:
    image: simonschool/woody_order_worker:latest
    deploy:
      replicas: 5
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    depends_on:
      - rabbitmq
      - db

  front:
    image: simonschool/woody_front:latest
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  reverse:
    image: simonschool/woody_rp:latest
    ports:
      - "80:8080"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    depends_on:
      - front
      - misc-service
      - product-service
      - order-service

networks:
  default:
    driver: overlay

volumes:
  db-data:
  rabbitmq-data:
  redis-data: